warning.text = warning
error.text = error
info.text = info

file.size.limit.message = File length exceeds {0} lines
file.size.limit.label = File length
file.size.limit.description = Check the number of lines in a file
file.size.limit.maxFileLength.label = Maximum file length
file.size.limit.maxFileLength.description = Maximum number of lines in a file

line.size.limit.message = File line length exceeds {0} characters
line.size.limit.label = File line length
line.size.limit.description = Check the number of characters in a line
line.size.limit.maxLineLength.label = Maximum line length
line.size.limit.maxLineLength.description = Maximum number of characters in a line
line.size.limit.tabSize.label = Tab size
line.size.limit.tabSize.description = Number of characters that a tab represents
line.size.limit.ignoreImports.label = Ignore import statements
line.size.limit.ignoreImports.description = Ignore import statements

line.contains.tab.message = Line contains a tab
line.contains.tab.label = Line contains Tab
line.contains.tab.description = Check that there are no tabs in a file

magic.number.message=Magic Number
magic.number.label=Magic Number
magic.number.description=Checks for use of magic numbers
magic.number.ignore.label=Ignore
magic.number.ignore.description=The comma separated list of numbers to ignore when used as magic numbers

header.matches.message = Header does not match expected text
header.matches.label = Match Header
header.matches.description = Check the first lines of each file matches the text
header.matches.header.label = Header
header.matches.header.description = The lines to compare against

spaces.after.plus.message = There should be a space after the plus (+) sign
spaces.after.plus.label = Space after plus
spaces.after.plus.description = Check that the plus sign is followed by a space

whitespace.end.of.line.message = Whitespace at end of line
whitespace.end.of.line.label = Whitespace at end of line
whitespace.end.of.line.description = Check that there is no trailing whitespace at the end of lines

spaces.before.plus.message = There should be a space before the plus (+) sign
spaces.before.plus.label = Space before plus
spaces.before.plus.description = Check that the plus sign is preceded by a space

class.name.message = Class name does not match the regular expression ''{0}''
class.name.label = Class name
class.name.description = Check that class names match a regular expression
class.name.regex.label = Regular expression
class.name.regex.description = The class names must match this regular expression

object.name.message = Object name does not match the regular expression ''{0}''
object.name.label = Object name
object.name.description = Check that object names match a regular expression
object.name.regex.label = Regular expression
object.name.regex.description = The object names must match this regular expression

equals.hash.code.message = You should implement equals and hashCode together
equals.hash.code.label = Equals hashCode
equals.hash.code.description = Check that if a class implements either equals or hashCode, it should implement the other

illegal.imports.message = Import from illegal package
illegal.imports.label = Illegal imports
illegal.imports.description = Check that a class does not import certain classes
illegal.imports.illegalImports.label = Illegal Imports
illegal.imports.illegalImports.description = The comma separated list of illegal imports, wildcards allowed

parameter.number.message = The number of parameters should not exceed {0}
parameter.number.label = Maximum parameters
parameter.number.description = Maximum number of parameters for a method
parameter.number.maxParameters.label = Maximum Number
parameter.number.maxParameters.description = The maximum number of parameters

no.whitespace.before.left.bracket.message = There should be no space before a left bracket ''[''
no.whitespace.before.left.bracket.label = No whitespace before left bracket ''[''
no.whitespace.before.left.bracket.description = No whitespace before left bracket ''[''

no.whitespace.after.left.bracket.message = There should be no space after a left bracket ''[''
no.whitespace.after.left.bracket.label = No whitespace after left bracket ''[''
no.whitespace.after.left.bracket.description = No whitespace after left bracket ''[''

return.message = Avoid using return
return.label = Return
return.description = Check that return is not used

null.message = Avoid using null
null.label = Null
null.description = Check that null is not used

no.clone.message = Avoid using clone method.
no.clone.label = Clone method
no.clone.description = Check that classes and objects do not define the clone() method

no.finalize.message = Avoid using finalize method.
no.finalize.label = Finalize method
no.finalize.description = Check that classes and objects do not define the finalize() method

covariant.equals.message = Covariant equals without overriding equals(java.lang.Object).
covariant.equals.label = Covariant equals
covariant.equals.description = Check that classes and objects do not define equals without overriding equals(java.lang.Object).

structural.type.message = Avoid using structural types
structural.type.label = Structural type
structural.type.description = Check that structural types are not used.

package.name.message = Package name does not match the regular expression ''{0}''
package.name.label = Package name
package.name.description = Check that package names match a regular expression
package.name.regex.label = Regular expression
package.name.regex.description = The package names must match this regular expression

package.object.name.message = Package object name does not match the regular expression ''{0}''
package.object.name.label = Package object name
package.object.name.description = Check that package object names match a regular expression
package.object.name.regex.label = Regular expression
package.object.name.regex.description = The package object names must match this regular expression

regex.message = Regular expression matched ''{0}''
regex.label = Regular expression
regex.description = Checks that a regular expression cannot be matched, if found reports this
regex.regex.label = Regular expression
regex.regex.description = Standard Scala regular expression syntax including multiline

number.of.types.message = Number of types declared in the file exceeds {0}
number.of.types.label = Number of types
number.of.types.description = Checks that there are not too many types declared in a file
number.of.types.maxTypes.label = Maximum Number
number.of.types.maxTypes.description = Maximum number of types to allow

cyclomatic.complexity.message = Cyclomatic complexity of {0} exceeds max of {1}
cyclomatic.complexity.label = Cyclomatic complexity
cyclomatic.complexity.description = Checks that the cyclomatic complexity of a method does exceed a value
cyclomatic.complexity.maximum.label = Maximum
cyclomatic.complexity.maximum.description = Maximum cyclomatic complexity to allow for a method

uppercase.l.message = Use an uppercase L for long literals
uppercase.l.label = Long literal uppercase L
uppercase.l.description = Checks that if a long literal is used, then an uppercase L is used

simplify.boolean.expression.message = Boolean expression can be simplified
simplify.boolean.expression.label = Simplify Boolean expression
simplify.boolean.expression.description = Boolean expression can be simplified

if.brace.message = If block needs braces
if.brace.label = If block braces
if.brace.description = Checks that if statements have braces
if.brace.singleLineAllowed.label = Single Line Allowed
if.brace.singleLineAllowed.description = If without braces allowed if everything is on one line
if.brace.doubleLineAllowed.label = Double Line Allowed
if.brace.doubleLineAllowed.description = If without braces allowed if everything is on one line or two lines

method.length.message = Method is longer than {0} lines
method.length.label = Method length
method.length.description = Checks that methods do not exceed a maximum length
method.length.maxLength.label = Maximum length
method.length.maxLength.description = Maximum number of lines allowed for a method

method.name.message = Method name does not match the regular expression ''{0}''
method.name.label = Method name
method.name.description = Check that method names match a regular expression
method.name.regex.label = Regular expression
method.name.regex.description = The method names must match this regular expression
method.name.ignoreRegex.label = Regular expression to ignore
method.name.ignoreRegex.description = Method names which match this regular expression will be ignored
method.name.ignoreOverride.label = Ignore override
method.name.ignoreOverride.description = If set to true, methods which have the override modifier are ignored

number.of.methods.message = Number of methods in class exceeds {0}
number.of.methods.label = Number of methods in type
number.of.methods.description = Check that a class / trait / object does not have too many methods
number.of.methods.maxMethods.label = Maximum methods
number.of.methods.maxMethods.description = The maximum number of methods allowed

public.methods.have.type.message = Public method must have explicit type
public.methods.have.type.label = Public method must have type
public.methods.have.type.description = Check that a method has an explicit return type, it is not inferred
public.methods.have.type.ignoreOverride.label = Ignore overridden methods
public.methods.have.type.ignoreOverride.description = If true, public methods which override are ignored

newline.at.eof.message = File must end with newline character
newline.at.eof.label = Newline at EOF
newline.at.eof.description = Checks that a file ends with a newline character

no.newline.at.eof.message = File must not end with newline character
no.newline.at.eof.label = No Newline at EOF
no.newline.at.eof.description = Checks that a file does not end with a newline character

var.local.message = Avoid mutable local variables
var.local.label = No mutable local variables
var.local.description = Checks that functions do not define mutable variables

var.field.message = Avoid mutable fields
var.field.label = No mutable fields
var.field.description = Checks that classes and objects do not define mutable fields

while.message = Avoid using while loops
while.label = No while loops
while.description = Checks that while is not used

if.redundant.message = Eliminate redundant if expressions where both branches return constant booleans
if.redundant.label = No redundant if expressions
if.redundant.description = Checks that if expressions are not redundant, i.e. easily replaced by a variant of the condition

token.message = Regular expression matched ''{0}'' in a token
token.label = Regular expression in a token
token.description = Checks that a regular expression cannot be matched in a token, if found reports this
token.regex.label = Regular expression
token.regex.description = Standard Scala regular expression syntax

deprecated.java.message = @deprecated should be used instead of @java.lang.Deprecated
deprecated.java.label = No use of Java @Deprecated
deprecated.java.description = Checks that Java @Deprecated is not used, Scala @deprecated should be used instead

empty.class.message = Redundant braces after class definition
empty.class.label = Redundant braces in class definition
empty.class.description = If a class/trait has no members, the braces are unnecessary

class.type.parameter.name.message = Type parameter does not match ''{0}''
class.type.parameter.name.label = Class type parameter name
class.type.parameter.name.description = Checks that type parameter to a class matches a regular expression
class.type.parameter.name.regex.label = Regular expression
class.type.parameter.name.regex.description = Standard Scala regular expression syntax

underscore.import.message = Avoid wildcard imports
underscore.import.label = Avoid wildcard imports
underscore.import.description = Avoid wildcard imports

lowercase.pattern.match.message = Lowercase pattern match (surround with ``, or add : Any)
lowercase.pattern.match.label = Lowercase pattern match
lowercase.pattern.match.description = Checks that a case statement pattern match is not lower case, as this can cause confusion

multiple.string.literals.message = The string literal {0} appears {1} times in the file.
multiple.string.literals.label = Multiple string literals
multiple.string.literals.description = Checks that a string literal does not appear multiple times
multiple.string.literals.allowed.label = Maximum occurences allowed
multiple.string.literals.allowed.description = Maximum number of occurences allowed
multiple.string.literals.ignoreRegex.label = Ignore regular expression
multiple.string.literals.ignoreRegex.description = Regular expression to ignore

import.grouping.message = Imports should be grouped together
import.grouping.label = Group imports
import.grouping.description = Checks that imports are grouped together, not throughout the file

import.ordering.message = Imports should be ordered according to the configuration
import.ordering.label = Import Order
import.ordering.description = Checks that imports are grouped and ordered according to the style configuration.
import.ordering.noEmptyLine = There should be no empty line separating imports in the same group.
import.ordering.missingEmptyLine = There should at least one a single empty line separating groups {0} and {1}.
import.ordering.tooManyEmptyLines = There should at most {0} empty lines separating groups {1} and {2}.
import.ordering.wrongGroup = {0} should be in group {1}, not {2}.
import.ordering.wrongOrderInGroup = {0} is in wrong order relative to {1}.
import.ordering.wrongOrderInSelector = {0} should come before {1}.

not.implemented.error.usage.message = Usage of ??? operator
not.implemented.error.usage.label = Usage of ??? operator
not.implemented.error.usage.description = Checks that the code does not have ??? operators.

block.import.message = Avoid block imports
block.import.label = Avoid block imports
block.import.description = Checks that block imports are not used.

procedure.declaration.message = Use : Unit = for procedures
procedure.declaration.label = Use : Unit = for procedures
procedure.declaration.description = Use a : Unit = for procedure declarations

for.brace.message = Use braces in for comprehensions
for.brace.label = Use braces in for comprehensions
for.brace.description = Checks that braces are used in for comprehensions

space.after.comment.start.message = Insert a single whitespace after the start of the comment and before end (incase it is a block comment).
space.after.comment.start.label = Space after the start of the comment
space.after.comment.start.description = Checks a space after the start and before the end of the comment.

scaladoc.message = Missing or badly formed ScalaDoc: {0}
scaladoc.label = Missing or badly formed ScalaDoc: {0}
scaladoc.description = Checks that the ScalaDoc on documentable members is well-formed
scaladoc.ignoreRegex.label = "Regular expression"
scaladoc.ignoreRegex.description = "Class names matching this regular expression will be ignored"

indentation.message = Use correct indentation
indentation.label = Use correct indentation
indentation.description = Checks that lines are indented by a multiple of the tab size

field.name.message = Field name does not match the regular expression ''{0}''
field.name.label = Field name
field.name.description = Check that field names match a regular expression
field.name.regex.label = Regular expression
field.name.regex.description = The field names must match this regular expression

pattern.match.align.message = Pattern match arrows do not align
pattern.match.align.label = Pattern match align
pattern.match.align.description = Check that pattern match arrows align

todo.comment.message = "Use of TODO/FIXME comment"
todo.comment.label = "TODO/FIXME comment"
todo.comment.description = "Check for use of TODO/FIXME single line comments"
todo.comment.text.label = "Word list"
todo.comment.text.description = "Alternative list of words to look for, separated by |"
